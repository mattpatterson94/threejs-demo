/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { ReactElement, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import cake from '../../3d/cake.gltf'

type GLTFResult = GLTF & {
  nodes: {
    birthday_cake_1: THREE.Mesh
    birthday_cake_1_1: THREE.Mesh
    birthday_cake_1_2: THREE.Mesh
    birthday_cake_1_3: THREE.Mesh
    birthday_cake_1_4: THREE.Mesh
    birthday_cake_1_5: THREE.Mesh
    birthday_cake_1_6: THREE.Mesh
    birthday_cake_1_7: THREE.Mesh
    birthday_cake_1_8: THREE.Mesh
    birthday_cake_1_9: THREE.Mesh
    birthday_cake_1_10: THREE.Mesh
  }
  materials: {
    white_candy: THREE.MeshStandardMaterial
    light_red_candy: THREE.MeshStandardMaterial
    light_blue_candy: THREE.MeshStandardMaterial
    ['24___Default']: THREE.MeshStandardMaterial
    red_candy: THREE.MeshStandardMaterial
    blue_candy: THREE.MeshStandardMaterial
    candle_red: THREE.MeshStandardMaterial
    candle_white: THREE.MeshStandardMaterial
    black_candy: THREE.MeshStandardMaterial
    candle_blue: THREE.MeshStandardMaterial
    candle_yellow: THREE.MeshStandardMaterial
  }
}

export default function Model ({ ...props }: JSX.IntrinsicElements['group']): ReactElement {
  const group = useRef<THREE.Group>(null!)
  const { nodes, materials } = useGLTF(cake) as GLTFResult
  const [hovered, setHovered] = useState(false)

  useFrame(() => {
    group.current.position.z = THREE.MathUtils.lerp(
      group.current.position.z,
      hovered ? -1 : 0,
      0.075 - Math.abs(10) / 2000
    )
    group.current.rotation.z = THREE.MathUtils.lerp(group.current.rotation.z, hovered ? -0.5 : 0, 0.075)
  })

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      onPointerOver={(e) => { e.stopPropagation(); setHovered(true) }}
      onPointerOut={() => setHovered(false)}
    >
      <mesh geometry={nodes.birthday_cake_1.geometry} material={materials.white_candy} />
      <mesh geometry={nodes.birthday_cake_1_1.geometry} material={materials.light_red_candy} />
      <mesh geometry={nodes.birthday_cake_1_2.geometry} material={materials.light_blue_candy} />
      <mesh geometry={nodes.birthday_cake_1_3.geometry} material={materials['24___Default']} />
      <mesh geometry={nodes.birthday_cake_1_4.geometry} material={materials.red_candy} />
      <mesh geometry={nodes.birthday_cake_1_5.geometry} material={materials.blue_candy} />
      <mesh geometry={nodes.birthday_cake_1_6.geometry} material={materials.candle_red} />
      <mesh geometry={nodes.birthday_cake_1_7.geometry} material={materials.candle_white} />
      <mesh geometry={nodes.birthday_cake_1_8.geometry} material={materials.black_candy} />
      <mesh geometry={nodes.birthday_cake_1_9.geometry} material={materials.candle_blue} />
      <mesh geometry={nodes.birthday_cake_1_10.geometry} material={materials.candle_yellow} />
    </group>
  )
}

useGLTF.preload(cake)
